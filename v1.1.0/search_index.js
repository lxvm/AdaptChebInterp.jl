var documenterSearchIndex = {"docs":
[{"location":"methods/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"methods/","page":"Manual","title":"Manual","text":"Modules = [HChebInterp]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"methods/#HChebInterp.BatchFunction","page":"Manual","title":"HChebInterp.BatchFunction","text":"BatchFunction(f, [x])\n\nWrapper for an out-of-place function of the form f.(x), where the input x will be a vector with a similar element type to the input domain. Optionally provide a resizeable vector x to store the input points.\n\n\n\n\n\n","category":"type"},{"location":"methods/#HChebInterp.HAdaptError","page":"Manual","title":"HChebInterp.HAdaptError","text":"HAdaptError(; n=10)\n\nEstimate the error of the interpolant by dividing the panel into two, computing interpolants on the subpanels, and computing the maximum error between interpolants at n*p equispaced points, where p is the number of points used to compute each interpolant.\n\n\n\n\n\n","category":"type"},{"location":"methods/#HChebInterp.SpectralError","page":"Manual","title":"HChebInterp.SpectralError","text":"SpectralError(; n=3)\n\nEstimate the error of the interpolant by as the sum of the norm of the last n Chebyshev coefficients. Use abs to compute the norm of each coefficient.\n\n\n\n\n\n","category":"type"},{"location":"methods/#HChebInterp.hchebinterp-Union{Tuple{T}, Tuple{n}, Tuple{BatchFunction, StaticArraysCore.SVector{n, T}, StaticArraysCore.SVector{n, T}}} where {n, T}","page":"Manual","title":"HChebInterp.hchebinterp","text":"hchebinterp(f, a, b, [criterion=SpectralError()]; order=15, atol=0, rtol=0, norm=norm, maxevals=typemax(Int), initdiv=1, reuse=true)\n\nReturn a piecewise polynomial interpolant of f on the interval ab of degree order that is pointwise accurate to the requested tolerances. Uses criterion::AbstractAdaptCriterion to estimate the interpolant error for h-adaptation. If HAdaptError() is used as the criterion, it may be appropriate to reduce the order to 4 to avoid unnecessary function evaluations.\n\nnote: HChebInterp 1.1\nThe reuse keyword requires at least HChebInterp v1.1.\n\nThe keyword reuse specifies that the algorithm will reuse function evaluations on the interpolation grid whenever possible. For expensive functions and interpolation problems on the order of seconds, the benefit will be noticeable, i.e. roughly a 12% saving in function evaluations for the default solver. Since looking up the interpolation points is not necessarily fast, reuse=false can be set to turn off this optimization.\n\n\n\n\n\n","category":"method"},{"location":"methods/","page":"Manual","title":"Manual","text":"HChebInterp.AbstractAdaptCriterion","category":"page"},{"location":"methods/#HChebInterp.AbstractAdaptCriterion","page":"Manual","title":"HChebInterp.AbstractAdaptCriterion","text":"AbstractAdaptCriterion\n\nAbstract supertype for error criteria for adaptive refinement.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Batching","page":"Manual","title":"Batching","text":"","category":"section"},{"location":"methods/","page":"Manual","title":"Manual","text":"We also support a batching interface with out-of-place functions that can be parallelized by the user. For example","category":"page"},{"location":"methods/","page":"Manual","title":"Manual","text":"using HChebInterp\n\nf = x -> cis(x^2)\nb = BatchFunction(x -> f.(x))\np = hchebinterp(b, 0.0, 4.0)","category":"page"},{"location":"#HChebInterp.jl","page":"Home","title":"HChebInterp.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HChebInterp","category":"page"},{"location":"#HChebInterp","page":"Home","title":"HChebInterp","text":"A package for h-adaptive Chebyshev interpolation of N-D functions using FastChebInterp.jl. Algorithms based on work by Kaye et al.. See the tests for examples.\n\n\n\n\n\n","category":"module"}]
}
